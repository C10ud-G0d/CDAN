NetFlow
  NetFlow is a technology that collects traffic information on a router, switch, firewall, or other network device. 
  Created by Cisco, NetFlow focuses on only high-level session data. NetFlow data is geared toward providing network administrators with a fast, high-level view of traffic analytics. 
  Because NetFlow provides only summary records of network communications, it requires significantly less storage space than full packet capture.
  The three most commonly used NetFlow versions are NetFlow v5, NetFlow v9, and Internet Protocol Flow Information Export (IPFIX). 
  As discussed in the previous Cyber Defense Analyst – Network (CDA-N) lesson Introduction to NetFlow, several differences exist between these versions. 

DOCKER
  A software platform used for building,running, and managing packaged applications called containers.
  The most comparable versions are NetFlow v5 and v9. Despite being much older and less capable than v9, NetFlow v5 is significantly more popular. 
  This is due largely to the fact that more devices support v5 than v9. Additionally, the process of changing to a newer version could create a gap in traffic collection, leading to temporarily reduced network visibility.
  IPFIX is the most sophisticated version of NetFlow
  IPFIX is an open standard for exporting Internet Protocol (IP) flow information. 
  This is due primarily to the fact that IPFIX is directly based on NetFlow v9, supporting backward compatibility for v9 traffic, and was created by several individuals who worked on v9. However, the differentiating factor that separates IPFIX from NetFlow is flexibility.
  IPFIX (with its backward compatibility) supports up to 238 data field types, whereas NetFlow v9 recognizes only 79.

Insight on Less Critical Network Segments

  Occasionally, sections of a network (subnets, Virtual Local Area Networks [VLAN], and other segments) are not as important as others. 
  Whether they serve as backups, guest networks, or other nonessential segments, these parts of the network do not require the same level of attention that goes into a mission-critical network. 
  Therefore, network administrators may forgo the deployment and configuration of full network sensors for these networks or sections. 
  However, if high-level insight is still desired, NetFlow can be configured to provide data without the heft of full PCAPs created by sensors. 

Limited Quantities of Sensors 
  Sensor coverage may be limited due to the size of the network and the lack of enough sensors to capture each segment. 
  Due to this, NetFlow can be used to supplement the need for monitoring.
  By combining PCAP generated by sensors with flows generated by NetFlow-configured routers, switches, and firewalls, administrators can still obtain data on their networks without the full use of sensors. 

SPAN Is Unavailable 
  Switched Port Analyzer (SPAN), also known as port mirroring, allows the user to copy traffic from a specific interface on a switch and output it into a monitoring interface.
  From there, the traffic can be viewed in a program such as Wireshark and analyzed. However, limitations must be considered for the use of SPAN. 
  First, SPAN requires an available port in order to output its copied traffic to a configured destination. 
  If a switch is using all its ports, SPAN cannot be used. Second, the destination port must be able to handle the source’s traffic input. 
  If an entire VLAN is being copied into a single interface, the port may not be able to handle the bandwidth demands. 

  NetFlow can address these issues. Unlike SPAN, NetFlow does not require a “free” port. Instead, interfaces are configured to create NetFlow data from the passing traffic, which is then sent to a collector in intervals rather than as a continuous stream. 

Storage Limitations
   When massive quantities of traffic are being processed, capturing full copies of the packets places a strain on storage. 

Equally important to identifying collection points is determining how NetFlow data will be transmitted. 
Using an Out-of-Band (OOB) network for transmission is recommended, as it helps to ensure data integrity and reduces traffic on production networks.

Which are use cases for OOB NetFlow ingestion?
  Reducing the amount of traffic being monitored
  NetFlow traffic as trusted traffic
  A network with very limited bandwith

Log Generation and Processing
  Filebeat processes the incoming NetFlow data using a pipeline. 
  The ingested NetFlow data is broken into hundreds of fields, depending on the NetFlow version and the values present in the data. 
  Each field has an associated data type. For example, netflow.destination_ipv4_address is an ip type, and netflow.destination_transport_port is an integer type.
  The pipeline performs field extraction, parsing, and normalization to create structured records with predefined fields. Common fields that may be used to perform NetFlow queries include, but are not limited to, the following:

  event.action: netflow_flow
  event.dataset: netflow.log 
  event.module: netflow 
  flow.id: (random assigned id) 
  input.type: netflow 
  metadata.pipeline: filebeat-7.17-1-netflow-log-pipeline 
  service.type: netflow
  netflow.destination_ipv4_address
  netflow.destination_transport_port

Denial of Service Identification
  The goal of a DoS attack is to prevent legitimate users from accessing a service or resource. 
  This loss of access can range from a single service or machine to an entire network or multiple networks. 
  There are many different categories of DoS attacks, each with their own characteristics and varying degrees of impact. 
  A Distributed Denial of Service (DDoS) attack is a DoS attack that is launched from more than one attacker-controlled host. 
  Hosts used in a DDoS attack might be from a large number of attackers coordinating their attack or from unwitting bots under the control of a single attacker.

SYN Floods 
  The well-known “three-way handshake” used when establishing a Transmission Control Protocol (TCP) connection is a frequent target of abuse in a DoS attack. 
  Normally, a client sends a SYN message to a server, which then causes the server to reply with a SYN-ACK message. 
  Upon receipt of the SYN-ACK message, the client sends an ACK message back to the server. 

  A SYN flood takes advantage of the server’s willingness to send SYN-ACK responses to incoming SYN messages. 
  An attacker rapidly sends large quantities of SYN packets to open ports on the target’s server. 
  The unwitting server then begins to send SYN-ACK replies to the attacker. However, the attacker’s Internet Protocol (IP) address is often spoofed or fake. 
  This means that the SYN-ACK reply never reaches its intended client, and the victim server waits for the acknowledgement of the SYN-ACK with an open connection. 
  Although the server can close the port by sending a Reset (RST) packet, another malicious SYN packet arrives before the server can do so, starting the cycle again. 
  This state, in which the server awaits ACK packets and cannot close the ports with a RST packet, is known as being half-open.

SYN-ACK Flood
  SYN-ACK floods, like SYN floods, target the server instead of another client. In this case, the attacker sends SYN-ACK packets at a high rate to the server. 
  When the server receives these packets, significant amounts of processing power are required to determine why these packets are being received out of order (because it is expecting a SYN packet first). 
  This high-resource consumption can deny service to legitimate users.

  To mitigate a DNS flood, well-known techniques may be employed. 
  The first mitigation is to disallow unsolicited DNS responses. In a legitimate DNS query, a resolver makes a request to a server, and the server sends a response to the resolver. 
  In the case of a DNS flood, the attacker sends responses to a resolver without any requests in the first place. 
  By blocking unsolicited responses, this attack can be reduced. Second, dropping rapid retransmissions from the same IP address prevents single spoofed IP addresses from making a large impact. 
  Following this, enabling a timeout on responses to individual queries prevents the resolver from becoming overloaded with responding to every malicious request. 

Amplification DNS Flood
  All amplification attacks rely on the ability of a single system to generate small requests with low effort (low bandwidth, processing power, and memory) and cause a server to generate large, high-effort responses. 
  This imbalance of proportions can be exploited in various attacks. 
  In an amplification DNS flood attack, multiple bots are employed by a single attacker. 
  Each bot spoofs the IP address of a single victim and proceeds to generate high volumes of requests to a DNS resolver. 
  To cause as much traffic congestion as possible, the attacker crafts the DNS request to generate a large response. 
  When the bots send requests to the DNS resolver, the massive quantities of traffic are actually sent to the legitimate victim’s IP address, not the attacker’s systems, which are spoofing the address.
  The act of impersonating a victim’s IP address and then having a server send its responses to the actual victim’s IP address is known as reflection. 
  This attack can be further modified by sending requests to multiple DNS servers, which all point their responses to the single victim’s machine.

Amplification Reflection SYN-ACK Flood
  Amplification reflection SYN-ACK floods operate on the principles of both amplification attacks and reflection attacks. 
  In this type of attack, a threat actor spoofs a victim client’s IP address and then sends SYN packets to a server. 
  Unlike a SYN flood, in which the attack targets the server itself, a SYN-ACK flood attack targets another client. 
  Once the server receives the SYN packets, it attempts to respond to them by sending SYN-ACK packets to the victim’s machine (whose IP address is being spoofed by the attacker). 
  Like other amplification attacks, the attacker can send multiple SYN packets to multiple servers, which all concentrate their SYN-ACK responses to the same client. 


Normally, due to the nature of the TCP three-way handshake, the ratio of SYN to SYN-ACK to ACK packets is roughly 1:1:1. 

﻿Enterprise Network Architecture
  Most services in enterprise networks employ a client/server architecture. 
  Active Directory Domain Services (AD DS, or AD) is one of the most common client/server systems in enterprise networks. 
  AD servers (called Domain Controllers [DC]) provide centralized authentication and authorization and enforce security policies and configurations.

  AD relies on several protocols and services to function, namely, Lightweight Directory Access Protocol (LDAP), Domain Name System (DNS), and Kerberos. 
  For systems to properly function and interact within an AD environment, they must first be able to locate the DCs. 
  Client systems in AD use DNS to resolve and identify the DCs for the AD environment they are bound to. 
  Once DCs are identified, such services as Kerberos are used to authenticate between client and server, and such services as LDAP are used to exchange information contained within AD.

  Another example of client/server architecture is VoIP. 
  In VoIP applications, such protocols as Real-Time Transport Protocol (RTP) and Real-Time Transport Control Protocol (RTCP) are used between voice clients (phones) and the voice server to carry audio and session control information. 
  In many VoIP applications, Dynamic Host Configuration Protocol (DHCP) is leveraged to provide information about the phone system to clients when they connect. 
  When IP phones connect, special DHCP options can instruct the phone to use a specific voice server or use a server to check for software and configuration updates. 

Operational Technology Networks
  OT networks consist of hardware and software used to monitor and control industrial equipment, processes, and assets. 
  OT networks communicate over specialized and often proprietary protocols. Typically, OT networks are isolated from IT networks and are carefully monitored for any changes to the environment. 
  When changes occur, they must be carefully implemented due to the volatile nature of interoperability between devices.

  OT networks are often found in such locations as power plants, water treatment plants, and refineries. 
  OT networks and devices have also become common for such applications as building lighting and automation; Heating, Ventilation, and Air Conditioning (HVAC) control; elevator control; and physical access control systems.

