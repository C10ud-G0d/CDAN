Request for Comments
    Requests for Comments (RFC) define internet specifications, procedures, events, and communication protocols. 
    An RFC is a numbered document that includes appraisals, methods, behaviors, and research as well as descriptions and definitions of online protocols. 
    Administered by the Internet Engineering Task Force (IETF), many of the protocol standards used online are published in RFCs. 
    The Internet Society, designers, engineers, and computer scientists publish discourses in the form of RFCs to share new concepts, information, etc. These internet drafts are peer reviewed before they become RFCs. 

    Proposed: Early stage; proposed protocol.
    Draft: On track; likely a future protocol.
    Standard: Established as a standard protocol.
    Historic: Older protocols; suspended or unused.
    Experimental: Research protocols documented to provide a convenient reference


Libpcap

  An Application Programming Interface (API) that provides a series of services to enable the capture of network packets.
  Portable open-source C/C++ library for Linux and Mac Operating System (OS) users.Enables administrators to capture and filter packets.Utilized by other tools such as tcpdump.


WinPcap

  Windows open-source library for PCAP and network analysis. 
  The purpose of WinPcap is to facilitate access to Win32 applications and administer the following:

  Portable PCAP library for Windows users.Contains the adaptation layer.
  Captures raw packets; both the packets destined to the machine and the ones exchanged by other hosts.
  Filters packets according to user-specified rules.
  Transmits raw packets to the network.
  Gathers statistical information about the network traffic.
  Utilized by other tools such as Network Mapper (Nmap) and Snort.


TShark
 
  TShark is a powerful and useful CLI-oriented version of Wireshark. 
  It is designed to enable the user to capture packet data from a live network or read packets from a previously saved capture file — either printing a decoded form of those packets to the standard output or writing the packets to a file when a GUI is not available to the user. 
  TShark also uses the PCAP library to capture traffic from the network interface. 
  Even though a GUI is much easier to manipulate, it is not supported by all environments, and using a CLI without a GUI is inevitable. 
  While very similar to tcpdump, TShark is best used when analyzing large PCAP files, and tcpdump is preferred for live PCAPs. 
  Even though both tools are basically equivalent in functionality, TShark is a bit more powerful than tcpdump, as it incorporates many of the robust features found within Wireshark. 

Capture Filters

  Capture filters use a different syntax from display filters and keep only packets that match the criteria of the capture filter to be retained in the PCAP. 
  Instead of solely using Boolean operators as the main function of the syntax, capture filters can also use byte offsets, hex values, and masks with certain Boolean operators to filter the data. 
  Within this section, learn how capture filters are created and used by employing the Berkeley Packet Filter (BPF) syntax that both Wireshark and TShark leverage. 


COMMANDS FOR TSHARK 

Capture traffic from interface eth0.

  tshark -i eth0

Capture traffic from interface eth0, with a capture filter for TCP traffic with a destination port of 80.

 tshark -i eth0 -f 'tcp && dst port 80'

Read one PCAP file as input and write captured packets out to a second file.

  tshark -w name-of-out-file.pcap -r name-of-in-file.pcap

The following description provides the syntax to use TShark with display filters:

  tshark [options] -Y "display filter"

To provide a more verbose output of application layer protocols from a specific PCAP file, the following command can be used:

  tshark -V -r dnscat.pcap

To apply an absolute timestamp output specific to a PCAP file, the following command can be used:
  
  tshark -t ad -r dnscat.pcap

To apply a hexadecimal and American Standard Code for Information Interchange (ASCII) output of a PCAP file, the following command can be used:
  
  tshark -xr dnscat.pcap

Protocol statistics such as http, tree; http_req, tree; smb, and srt can be generated by using the -z command: 

  tshark -r dnscat.pcap -z http,tree

Protocol statistics such as http, tree; http_req, tree; smb, and srt can be generated by using the -z command: 
  
  tshark -r dnscat.pcap -z http,tree

Display Filters

  Display filters differ from capture filters. 
  Display filters are applied to a packet while a capture is taking place or after the data has been collected. 
  Display filters do not aid to reduce compute resources but do aid in narrowing the amount of data in a set when investigating specific elements. 
  Protocol dissectors are the elements within Wireshark and TShark that identify and interpret a packet based on the presence or absence of fields or values within those packets. 
  It is how these tools are able to determine that a Hypertext Transmission Protocol (HTTP) packet and the associated application layer fields within are what they are and how they are able to recognize which Layer 2 or Layer 3 protocol is in use.

Applying Filters to Export SMB Objects

  It is known that some malware utilizes Microsoft's SMB protocol to spread across an Active Directory (AD)–based network. 
  It has been noted that a finance manager within the network has detected suspicious activity going on that may be a result of a banking trojan known as Trickbot that utilizes an exploit based on EternalBlue to spread across the network by utilizing the SMB protocol.

What Is Trickbot?
  TrickBot, which has been tied to Lazarus Advanced Persistent Threat (APT), is an advanced trojan that specific threat actors utilize. 
  Delivery of TrickBot is primarily by spear-phishing campaigns using tailored emails that  masquerade  malicious attachments or links, which, if enabled, execute malware via exploits such as EternalBlue to move laterally through the network via SMB port 445. 
  EternalBlue leverages a buffer overflow attack via SMBv1. 
  TrickBot also uses Man-in-the-Browser (MitB) attacks (MITRE Adversarial Tactics, Techniques, and Common Knowledge [ATT&CK®] Technique T1185) to steal user information. 
  The malware spans across the entirety of the ATT&CK framework, resulting in actively or passively gathering information to support targeting, or trying to manipulate, interrupt, or destroy the system and or data. 
  It is often seen communicating using HTTPS/Secure Sockets Layer (SSL)/Transport Layer Security (TLS) over TCP ports 443, 447, and 449 to retrieve files or using HTTP over 8082 to retrieve tasking or exfil data via Command and Control (C2) channels. 
  Trickbot often downloads binary executable files that are masqueraded as another innocuous file type, such as a .png or a .php file.



  
